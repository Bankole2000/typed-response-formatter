"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GatewayTimeout = exports.ServiceUnavailable = exports.BadGateway = exports.InternalServerError = exports.UnavailableForLegalReasons = exports.TooManyRequests = exports.Locked = exports.UnprocessableEntity = exports.ExpectationFailed = exports.UnsupportedMediaType = exports.PayloadTooLarge = exports.Conflict = exports.Timeout = exports.MethodNotAllowed = exports.NotFound = exports.Forbidden = exports.PaymentRequired = exports.Unauthorized = exports.BadRequest = exports.NoContent = exports.Created = exports.OK = void 0;
const statusTypes_1 = require("./statusTypes");
const ServiceResponse_1 = require("./ServiceResponse");
const OK = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.OK].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.OK].code, success = true, error = undefined, errMessage = undefined, fix = undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.OK, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.OK = OK;
const Created = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.Created].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.Created].code, success = true, error = undefined, errMessage = undefined, fix = undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.Created, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.Created = Created;
const NoContent = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.NoContent].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.NoContent].code, success = true, error = undefined, errMessage = undefined, fix = statusTypes_1.defaults[statusTypes_1.StatusType.NoContent].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.NoContent].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.NoContent, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.NoContent = NoContent;
const BadRequest = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.BadRequest].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.BadRequest].code, success = false, error = statusTypes_1.defaults[statusTypes_1.StatusType.BadRequest].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.BadRequest].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.BadRequest].fix, newAccessToken = undefined, statusType = statusTypes_1.StatusType.BadRequest, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.BadRequest = BadRequest;
const Unauthorized = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.Unauthorized].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.Unauthorized].code, success = false, error = statusTypes_1.defaults[statusTypes_1.StatusType.Unauthorized].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.Unauthorized].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.Unauthorized].fix, newAccessToken = undefined, statusType = statusTypes_1.StatusType.Unauthorized, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.Unauthorized = Unauthorized;
const PaymentRequired = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.PaymentRequired].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.PaymentRequired].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.PaymentRequired].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.PaymentRequired].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.PaymentRequired].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.PaymentRequired].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.PaymentRequired].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.PaymentRequired].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.PaymentRequired].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.PaymentRequired, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.PaymentRequired = PaymentRequired;
const Forbidden = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.Forbidden].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.Forbidden].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.Forbidden].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.Forbidden].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.Forbidden].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.Forbidden].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.Forbidden].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.Forbidden].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.Forbidden].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.Forbidden, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.Forbidden = Forbidden;
const NotFound = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.NotFound].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.NotFound].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.NotFound].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.NotFound].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.NotFound].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.NotFound].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.NotFound].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.NotFound].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.NotFound].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.NotFound, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.NotFound = NotFound;
const MethodNotAllowed = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.MethodNotAllowed].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.MethodNotAllowed].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.MethodNotAllowed].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.MethodNotAllowed].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.MethodNotAllowed].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.MethodNotAllowed].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.MethodNotAllowed].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.MethodNotAllowed].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.MethodNotAllowed].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.MethodNotAllowed, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.MethodNotAllowed = MethodNotAllowed;
const Timeout = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.Timeout].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.Timeout].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.Timeout].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.Timeout].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.Timeout].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.Timeout].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.Timeout].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.Timeout].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.Timeout].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.Timeout, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.Timeout = Timeout;
const Conflict = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.Conflict].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.Conflict].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.Conflict].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.Conflict].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.Conflict].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.Conflict].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.Conflict].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.Conflict].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.Conflict].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.Conflict, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.Conflict = Conflict;
const PayloadTooLarge = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.PayloadTooLarge].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.PayloadTooLarge].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.PayloadTooLarge].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.PayloadTooLarge].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.PayloadTooLarge].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.PayloadTooLarge].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.PayloadTooLarge].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.PayloadTooLarge].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.PayloadTooLarge].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.PayloadTooLarge, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.PayloadTooLarge = PayloadTooLarge;
const UnsupportedMediaType = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.UnsupportedMediaType].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.UnsupportedMediaType].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.UnsupportedMediaType].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.UnsupportedMediaType].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.UnsupportedMediaType].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.UnsupportedMediaType].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.UnsupportedMediaType].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.UnsupportedMediaType].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.UnsupportedMediaType].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.UnsupportedMediaType, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.UnsupportedMediaType = UnsupportedMediaType;
const ExpectationFailed = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.ExpectationFailed].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.ExpectationFailed].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.ExpectationFailed].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.ExpectationFailed].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.ExpectationFailed].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.ExpectationFailed].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.ExpectationFailed].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.ExpectationFailed].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.ExpectationFailed].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.ExpectationFailed, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.ExpectationFailed = ExpectationFailed;
const UnprocessableEntity = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.UnprocessableEntity].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.UnprocessableEntity].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.UnprocessableEntity].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.UnprocessableEntity].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.UnprocessableEntity].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.UnprocessableEntity].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.UnprocessableEntity].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.UnprocessableEntity].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.UnprocessableEntity].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.UnprocessableEntity, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.UnprocessableEntity = UnprocessableEntity;
const Locked = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.Locked].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.Locked].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.Locked].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.Locked].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.Locked].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.Locked].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.Locked].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.Locked].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.Locked].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.Locked, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.Locked = Locked;
const TooManyRequests = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.TooManyRequests].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.TooManyRequests].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.TooManyRequests].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.TooManyRequests].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.TooManyRequests].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.TooManyRequests].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.TooManyRequests].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.TooManyRequests].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.TooManyRequests].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.TooManyRequests, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.TooManyRequests = TooManyRequests;
const UnavailableForLegalReasons = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.UnavailableForLegalReasons].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.UnavailableForLegalReasons].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.UnavailableForLegalReasons].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.UnavailableForLegalReasons].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.UnavailableForLegalReasons].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.UnavailableForLegalReasons].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.UnavailableForLegalReasons].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.UnavailableForLegalReasons].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.UnavailableForLegalReasons].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.UnavailableForLegalReasons, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.UnavailableForLegalReasons = UnavailableForLegalReasons;
const InternalServerError = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.InternalServerError].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.InternalServerError].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.InternalServerError].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.InternalServerError].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.InternalServerError].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.InternalServerError].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.InternalServerError].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.InternalServerError].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.InternalServerError].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.InternalServerError, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.InternalServerError = InternalServerError;
const BadGateway = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.BadGateway].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.BadGateway].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.BadGateway].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.BadGateway].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.BadGateway].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.BadGateway].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.BadGateway].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.BadGateway].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.BadGateway].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.BadGateway, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.BadGateway = BadGateway;
const ServiceUnavailable = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.ServiceUnavailable].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.ServiceUnavailable].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.ServiceUnavailable].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.ServiceUnavailable].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.ServiceUnavailable].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.ServiceUnavailable].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.ServiceUnavailable].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.ServiceUnavailable].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.ServiceUnavailable].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.ServiceUnavailable, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.ServiceUnavailable = ServiceUnavailable;
const GatewayTimeout = ({ message = statusTypes_1.defaults[statusTypes_1.StatusType.GatewayTimeout].message, data = null, statusCode = statusTypes_1.defaults[statusTypes_1.StatusType.GatewayTimeout].code, success = statusTypes_1.defaults[statusTypes_1.StatusType.GatewayTimeout].code < 300 ? true : false, error = statusTypes_1.defaults[statusTypes_1.StatusType.GatewayTimeout].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.GatewayTimeout].message, errMessage = statusTypes_1.defaults[statusTypes_1.StatusType.GatewayTimeout].code < 300 ? undefined : statusTypes_1.defaults[statusTypes_1.StatusType.GatewayTimeout].message, fix = statusTypes_1.defaults[statusTypes_1.StatusType.GatewayTimeout].fix ? statusTypes_1.defaults[statusTypes_1.StatusType.GatewayTimeout].fix : undefined, newAccessToken = undefined, statusType = statusTypes_1.StatusType.GatewayTimeout, meta = undefined }) => new ServiceResponse_1.ServiceResponse({ message, data, success, statusCode, errMessage, error, fix, statusType, newAccessToken, meta });
exports.GatewayTimeout = GatewayTimeout;
