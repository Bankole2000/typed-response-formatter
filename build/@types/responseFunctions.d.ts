import { ServiceResponse } from "./ServiceResponse";
import { TResponse } from "./interfaces";
export declare const OK: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const Created: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const NoContent: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const BadRequest: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const Unauthorized: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const PaymentRequired: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const Forbidden: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const NotFound: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const MethodNotAllowed: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const Timeout: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const Conflict: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const PayloadTooLarge: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const UnsupportedMediaType: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const ExpectationFailed: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const UnprocessableEntity: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const Locked: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const TooManyRequests: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const UnavailableForLegalReasons: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const InternalServerError: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const BadGateway: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const ServiceUnavailable: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
export declare const GatewayTimeout: <k extends string, K = any>({ message, data, statusCode, success, error, errMessage, fix, newAccessToken, statusType, meta }: TResponse<k, K>) => ServiceResponse<k, K>;
